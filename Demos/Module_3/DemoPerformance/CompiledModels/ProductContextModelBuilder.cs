// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace DemoPerformance
{
    public partial class ProductContextModel
    {
        partial void Initialize()
        {
            var brand = BrandEntityType.Create(this);
            var price = PriceEntityType.Create(this);
            var product = ProductEntityType.Create(this);
            var productGroup = ProductGroupEntityType.Create(this);
            var review = ReviewEntityType.Create(this);
            var reviewer = ReviewerEntityType.Create(this);
            var reviewerCredential = ReviewerCredentialEntityType.Create(this);
            var specification = SpecificationEntityType.Create(this);
            var specificationDefinition = SpecificationDefinitionEntityType.Create(this);

            PriceEntityType.CreateForeignKey1(price, product);
            ProductEntityType.CreateForeignKey1(product, brand);
            ProductEntityType.CreateForeignKey2(product, productGroup);
            ReviewEntityType.CreateForeignKey1(review, product);
            ReviewEntityType.CreateForeignKey2(review, reviewer);
            ReviewerEntityType.CreateForeignKey1(reviewer, reviewerCredential);
            SpecificationEntityType.CreateForeignKey1(specification, product);
            SpecificationDefinitionEntityType.CreateForeignKey1(specificationDefinition, productGroup);

            BrandEntityType.CreateAnnotations(brand);
            PriceEntityType.CreateAnnotations(price);
            ProductEntityType.CreateAnnotations(product);
            ProductGroupEntityType.CreateAnnotations(productGroup);
            ReviewEntityType.CreateAnnotations(review);
            ReviewerEntityType.CreateAnnotations(reviewer);
            ReviewerCredentialEntityType.CreateAnnotations(reviewerCredential);
            SpecificationEntityType.CreateAnnotations(specification);
            SpecificationDefinitionEntityType.CreateAnnotations(specificationDefinition);

            AddAnnotation("ProductVersion", "8.0.8");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var brand = FindEntityType("DemoPerformance.Brand")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            brand.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var demoPerformanceBrandTableBase = new TableBase("DemoPerformance.Brand", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "bigint", demoPerformanceBrandTableBase);
            demoPerformanceBrandTableBase.Columns.Add("Id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(255)", demoPerformanceBrandTableBase)
            {
                IsNullable = true
            };
            demoPerformanceBrandTableBase.Columns.Add("Name", nameColumnBase);
            var timestampColumnBase = new ColumnBase<ColumnMappingBase>("Timestamp", "rowversion", demoPerformanceBrandTableBase)
            {
                IsNullable = true
            };
            demoPerformanceBrandTableBase.Columns.Add("Timestamp", timestampColumnBase);
            var websiteColumnBase = new ColumnBase<ColumnMappingBase>("Website", "nvarchar(1024)", demoPerformanceBrandTableBase)
            {
                IsNullable = true
            };
            demoPerformanceBrandTableBase.Columns.Add("Website", websiteColumnBase);
            relationalModel.DefaultTables.Add("DemoPerformance.Brand", demoPerformanceBrandTableBase);
            var demoPerformanceBrandMappingBase = new TableMappingBase<ColumnMappingBase>(brand, demoPerformanceBrandTableBase, true);
            demoPerformanceBrandTableBase.AddTypeMapping(demoPerformanceBrandMappingBase, false);
            defaultTableMappings.Add(demoPerformanceBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, brand.FindProperty("Id")!, demoPerformanceBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, brand.FindProperty("Name")!, demoPerformanceBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timestampColumnBase, brand.FindProperty("Timestamp")!, demoPerformanceBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)websiteColumnBase, brand.FindProperty("Website")!, demoPerformanceBrandMappingBase);

            var tableMappings = new List<TableMapping>();
            brand.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var brandsTable = new Table("Brands", "Core", relationalModel);
            var idColumn = new Column("Id", "bigint", brandsTable);
            brandsTable.Columns.Add("Id", idColumn);
            var nameColumn = new Column("Name", "nvarchar(255)", brandsTable)
            {
                IsNullable = true
            };
            brandsTable.Columns.Add("Name", nameColumn);
            var timestampColumn = new Column("Timestamp", "rowversion", brandsTable)
            {
                IsNullable = true
            };
            brandsTable.Columns.Add("Timestamp", timestampColumn);
            var websiteColumn = new Column("Website", "nvarchar(1024)", brandsTable)
            {
                IsNullable = true
            };
            brandsTable.Columns.Add("Website", websiteColumn);
            var pK_Brands = new UniqueConstraint("PK_Brands", brandsTable, new[] { idColumn });
            brandsTable.PrimaryKey = pK_Brands;
            var pK_BrandsUc = RelationalModel.GetKey(this,
                "DemoPerformance.Brand",
                new[] { "Id" });
            pK_Brands.MappedKeys.Add(pK_BrandsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_BrandsUc).Add(pK_Brands);
            brandsTable.UniqueConstraints.Add("PK_Brands", pK_Brands);
            relationalModel.Tables.Add(("Brands", "Core"), brandsTable);
            var brandsTableMapping = new TableMapping(brand, brandsTable, true);
            brandsTable.AddTypeMapping(brandsTableMapping, false);
            tableMappings.Add(brandsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, brand.FindProperty("Id")!, brandsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, brand.FindProperty("Name")!, brandsTableMapping);
            RelationalModel.CreateColumnMapping(timestampColumn, brand.FindProperty("Timestamp")!, brandsTableMapping);
            RelationalModel.CreateColumnMapping(websiteColumn, brand.FindProperty("Website")!, brandsTableMapping);

            var price = FindEntityType("DemoPerformance.Price")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            price.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var demoPerformancePriceTableBase = new TableBase("DemoPerformance.Price", null, relationalModel);
            var basePriceColumnBase = new ColumnBase<ColumnMappingBase>("BasePrice", "float", demoPerformancePriceTableBase);
            demoPerformancePriceTableBase.Columns.Add("BasePrice", basePriceColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "bigint", demoPerformancePriceTableBase);
            demoPerformancePriceTableBase.Columns.Add("Id", idColumnBase0);
            var priceDateColumnBase = new ColumnBase<ColumnMappingBase>("PriceDate", "datetime2", demoPerformancePriceTableBase);
            demoPerformancePriceTableBase.Columns.Add("PriceDate", priceDateColumnBase);
            var productIdColumnBase = new ColumnBase<ColumnMappingBase>("ProductId", "bigint", demoPerformancePriceTableBase);
            demoPerformancePriceTableBase.Columns.Add("ProductId", productIdColumnBase);
            var shopNameColumnBase = new ColumnBase<ColumnMappingBase>("ShopName", "nvarchar(255)", demoPerformancePriceTableBase)
            {
                IsNullable = true
            };
            demoPerformancePriceTableBase.Columns.Add("ShopName", shopNameColumnBase);
            var timestampColumnBase0 = new ColumnBase<ColumnMappingBase>("Timestamp", "rowversion", demoPerformancePriceTableBase)
            {
                IsNullable = true
            };
            demoPerformancePriceTableBase.Columns.Add("Timestamp", timestampColumnBase0);
            relationalModel.DefaultTables.Add("DemoPerformance.Price", demoPerformancePriceTableBase);
            var demoPerformancePriceMappingBase = new TableMappingBase<ColumnMappingBase>(price, demoPerformancePriceTableBase, true);
            demoPerformancePriceTableBase.AddTypeMapping(demoPerformancePriceMappingBase, false);
            defaultTableMappings0.Add(demoPerformancePriceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, price.FindProperty("Id")!, demoPerformancePriceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)basePriceColumnBase, price.FindProperty("BasePrice")!, demoPerformancePriceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)priceDateColumnBase, price.FindProperty("PriceDate")!, demoPerformancePriceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productIdColumnBase, price.FindProperty("ProductId")!, demoPerformancePriceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)shopNameColumnBase, price.FindProperty("ShopName")!, demoPerformancePriceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timestampColumnBase0, price.FindProperty("Timestamp")!, demoPerformancePriceMappingBase);

            var tableMappings0 = new List<TableMapping>();
            price.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var pricesTable = new Table("Prices", "Core", relationalModel);
            var idColumn0 = new Column("Id", "bigint", pricesTable);
            pricesTable.Columns.Add("Id", idColumn0);
            var basePriceColumn = new Column("BasePrice", "float", pricesTable);
            pricesTable.Columns.Add("BasePrice", basePriceColumn);
            var priceDateColumn = new Column("PriceDate", "datetime2", pricesTable);
            pricesTable.Columns.Add("PriceDate", priceDateColumn);
            var productIdColumn = new Column("ProductId", "bigint", pricesTable);
            pricesTable.Columns.Add("ProductId", productIdColumn);
            var shopNameColumn = new Column("ShopName", "nvarchar(255)", pricesTable)
            {
                IsNullable = true
            };
            pricesTable.Columns.Add("ShopName", shopNameColumn);
            var timestampColumn0 = new Column("Timestamp", "rowversion", pricesTable)
            {
                IsNullable = true
            };
            pricesTable.Columns.Add("Timestamp", timestampColumn0);
            var pK_Prices = new UniqueConstraint("PK_Prices", pricesTable, new[] { idColumn0 });
            pricesTable.PrimaryKey = pK_Prices;
            var pK_PricesUc = RelationalModel.GetKey(this,
                "DemoPerformance.Price",
                new[] { "Id" });
            pK_Prices.MappedKeys.Add(pK_PricesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PricesUc).Add(pK_Prices);
            pricesTable.UniqueConstraints.Add("PK_Prices", pK_Prices);
            var iX_Prices_ProductId = new TableIndex(
            "IX_Prices_ProductId", pricesTable, new[] { productIdColumn }, false);
            var iX_Prices_ProductIdIx = RelationalModel.GetIndex(this,
                "DemoPerformance.Price",
                new[] { "ProductId" });
            iX_Prices_ProductId.MappedIndexes.Add(iX_Prices_ProductIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Prices_ProductIdIx).Add(iX_Prices_ProductId);
            pricesTable.Indexes.Add("IX_Prices_ProductId", iX_Prices_ProductId);
            relationalModel.Tables.Add(("Prices", "Core"), pricesTable);
            var pricesTableMapping = new TableMapping(price, pricesTable, true);
            pricesTable.AddTypeMapping(pricesTableMapping, false);
            tableMappings0.Add(pricesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, price.FindProperty("Id")!, pricesTableMapping);
            RelationalModel.CreateColumnMapping(basePriceColumn, price.FindProperty("BasePrice")!, pricesTableMapping);
            RelationalModel.CreateColumnMapping(priceDateColumn, price.FindProperty("PriceDate")!, pricesTableMapping);
            RelationalModel.CreateColumnMapping(productIdColumn, price.FindProperty("ProductId")!, pricesTableMapping);
            RelationalModel.CreateColumnMapping(shopNameColumn, price.FindProperty("ShopName")!, pricesTableMapping);
            RelationalModel.CreateColumnMapping(timestampColumn0, price.FindProperty("Timestamp")!, pricesTableMapping);

            var product = FindEntityType("DemoPerformance.Product")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            product.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var demoPerformanceProductTableBase = new TableBase("DemoPerformance.Product", null, relationalModel);
            var brandIdColumnBase = new ColumnBase<ColumnMappingBase>("BrandId", "bigint", demoPerformanceProductTableBase);
            demoPerformanceProductTableBase.Columns.Add("BrandId", brandIdColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "bigint", demoPerformanceProductTableBase);
            demoPerformanceProductTableBase.Columns.Add("Id", idColumnBase1);
            var imageColumnBase = new ColumnBase<ColumnMappingBase>("Image", "nvarchar(1024)", demoPerformanceProductTableBase)
            {
                IsNullable = true
            };
            demoPerformanceProductTableBase.Columns.Add("Image", imageColumnBase);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(255)", demoPerformanceProductTableBase)
            {
                IsNullable = true
            };
            demoPerformanceProductTableBase.Columns.Add("Name", nameColumnBase0);
            var productGroupIdColumnBase = new ColumnBase<ColumnMappingBase>("ProductGroupId", "bigint", demoPerformanceProductTableBase);
            demoPerformanceProductTableBase.Columns.Add("ProductGroupId", productGroupIdColumnBase);
            var timestampColumnBase1 = new ColumnBase<ColumnMappingBase>("Timestamp", "rowversion", demoPerformanceProductTableBase)
            {
                IsNullable = true
            };
            demoPerformanceProductTableBase.Columns.Add("Timestamp", timestampColumnBase1);
            relationalModel.DefaultTables.Add("DemoPerformance.Product", demoPerformanceProductTableBase);
            var demoPerformanceProductMappingBase = new TableMappingBase<ColumnMappingBase>(product, demoPerformanceProductTableBase, true);
            demoPerformanceProductTableBase.AddTypeMapping(demoPerformanceProductMappingBase, false);
            defaultTableMappings1.Add(demoPerformanceProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, product.FindProperty("Id")!, demoPerformanceProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)brandIdColumnBase, product.FindProperty("BrandId")!, demoPerformanceProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)imageColumnBase, product.FindProperty("Image")!, demoPerformanceProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, product.FindProperty("Name")!, demoPerformanceProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productGroupIdColumnBase, product.FindProperty("ProductGroupId")!, demoPerformanceProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timestampColumnBase1, product.FindProperty("Timestamp")!, demoPerformanceProductMappingBase);

            var tableMappings1 = new List<TableMapping>();
            product.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var productsTable = new Table("Products", "Core", relationalModel);
            var idColumn1 = new Column("Id", "bigint", productsTable);
            productsTable.Columns.Add("Id", idColumn1);
            var brandIdColumn = new Column("BrandId", "bigint", productsTable);
            productsTable.Columns.Add("BrandId", brandIdColumn);
            var imageColumn = new Column("Image", "nvarchar(1024)", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("Image", imageColumn);
            var nameColumn0 = new Column("Name", "nvarchar(255)", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("Name", nameColumn0);
            var productGroupIdColumn = new Column("ProductGroupId", "bigint", productsTable);
            productsTable.Columns.Add("ProductGroupId", productGroupIdColumn);
            var timestampColumn1 = new Column("Timestamp", "rowversion", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("Timestamp", timestampColumn1);
            var pK_Products = new UniqueConstraint("PK_Products", productsTable, new[] { idColumn1 });
            productsTable.PrimaryKey = pK_Products;
            var pK_ProductsUc = RelationalModel.GetKey(this,
                "DemoPerformance.Product",
                new[] { "Id" });
            pK_Products.MappedKeys.Add(pK_ProductsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ProductsUc).Add(pK_Products);
            productsTable.UniqueConstraints.Add("PK_Products", pK_Products);
            var iX_Products_BrandId = new TableIndex(
            "IX_Products_BrandId", productsTable, new[] { brandIdColumn }, false);
            var iX_Products_BrandIdIx = RelationalModel.GetIndex(this,
                "DemoPerformance.Product",
                new[] { "BrandId" });
            iX_Products_BrandId.MappedIndexes.Add(iX_Products_BrandIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Products_BrandIdIx).Add(iX_Products_BrandId);
            productsTable.Indexes.Add("IX_Products_BrandId", iX_Products_BrandId);
            var iX_Products_ProductGroupId = new TableIndex(
            "IX_Products_ProductGroupId", productsTable, new[] { productGroupIdColumn }, false);
            var iX_Products_ProductGroupIdIx = RelationalModel.GetIndex(this,
                "DemoPerformance.Product",
                new[] { "ProductGroupId" });
            iX_Products_ProductGroupId.MappedIndexes.Add(iX_Products_ProductGroupIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Products_ProductGroupIdIx).Add(iX_Products_ProductGroupId);
            productsTable.Indexes.Add("IX_Products_ProductGroupId", iX_Products_ProductGroupId);
            relationalModel.Tables.Add(("Products", "Core"), productsTable);
            var productsTableMapping = new TableMapping(product, productsTable, true);
            productsTable.AddTypeMapping(productsTableMapping, false);
            tableMappings1.Add(productsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, product.FindProperty("Id")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(brandIdColumn, product.FindProperty("BrandId")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(imageColumn, product.FindProperty("Image")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, product.FindProperty("Name")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(productGroupIdColumn, product.FindProperty("ProductGroupId")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(timestampColumn1, product.FindProperty("Timestamp")!, productsTableMapping);

            var productGroup = FindEntityType("DemoPerformance.ProductGroup")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            productGroup.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var demoPerformanceProductGroupTableBase = new TableBase("DemoPerformance.ProductGroup", null, relationalModel);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "bigint", demoPerformanceProductGroupTableBase);
            demoPerformanceProductGroupTableBase.Columns.Add("Id", idColumnBase2);
            var imageColumnBase0 = new ColumnBase<ColumnMappingBase>("Image", "nvarchar(1024)", demoPerformanceProductGroupTableBase)
            {
                IsNullable = true
            };
            demoPerformanceProductGroupTableBase.Columns.Add("Image", imageColumnBase0);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(255)", demoPerformanceProductGroupTableBase)
            {
                IsNullable = true
            };
            demoPerformanceProductGroupTableBase.Columns.Add("Name", nameColumnBase1);
            var timestampColumnBase2 = new ColumnBase<ColumnMappingBase>("Timestamp", "rowversion", demoPerformanceProductGroupTableBase)
            {
                IsNullable = true
            };
            demoPerformanceProductGroupTableBase.Columns.Add("Timestamp", timestampColumnBase2);
            relationalModel.DefaultTables.Add("DemoPerformance.ProductGroup", demoPerformanceProductGroupTableBase);
            var demoPerformanceProductGroupMappingBase = new TableMappingBase<ColumnMappingBase>(productGroup, demoPerformanceProductGroupTableBase, true);
            demoPerformanceProductGroupTableBase.AddTypeMapping(demoPerformanceProductGroupMappingBase, false);
            defaultTableMappings2.Add(demoPerformanceProductGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, productGroup.FindProperty("Id")!, demoPerformanceProductGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)imageColumnBase0, productGroup.FindProperty("Image")!, demoPerformanceProductGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, productGroup.FindProperty("Name")!, demoPerformanceProductGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timestampColumnBase2, productGroup.FindProperty("Timestamp")!, demoPerformanceProductGroupMappingBase);

            var tableMappings2 = new List<TableMapping>();
            productGroup.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var productGroupsTable = new Table("ProductGroups", "Core", relationalModel);
            var idColumn2 = new Column("Id", "bigint", productGroupsTable);
            productGroupsTable.Columns.Add("Id", idColumn2);
            var imageColumn0 = new Column("Image", "nvarchar(1024)", productGroupsTable)
            {
                IsNullable = true
            };
            productGroupsTable.Columns.Add("Image", imageColumn0);
            var nameColumn1 = new Column("Name", "nvarchar(255)", productGroupsTable)
            {
                IsNullable = true
            };
            productGroupsTable.Columns.Add("Name", nameColumn1);
            var timestampColumn2 = new Column("Timestamp", "rowversion", productGroupsTable)
            {
                IsNullable = true
            };
            productGroupsTable.Columns.Add("Timestamp", timestampColumn2);
            var pK_ProductGroups = new UniqueConstraint("PK_ProductGroups", productGroupsTable, new[] { idColumn2 });
            productGroupsTable.PrimaryKey = pK_ProductGroups;
            var pK_ProductGroupsUc = RelationalModel.GetKey(this,
                "DemoPerformance.ProductGroup",
                new[] { "Id" });
            pK_ProductGroups.MappedKeys.Add(pK_ProductGroupsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ProductGroupsUc).Add(pK_ProductGroups);
            productGroupsTable.UniqueConstraints.Add("PK_ProductGroups", pK_ProductGroups);
            relationalModel.Tables.Add(("ProductGroups", "Core"), productGroupsTable);
            var productGroupsTableMapping = new TableMapping(productGroup, productGroupsTable, true);
            productGroupsTable.AddTypeMapping(productGroupsTableMapping, false);
            tableMappings2.Add(productGroupsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, productGroup.FindProperty("Id")!, productGroupsTableMapping);
            RelationalModel.CreateColumnMapping(imageColumn0, productGroup.FindProperty("Image")!, productGroupsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, productGroup.FindProperty("Name")!, productGroupsTableMapping);
            RelationalModel.CreateColumnMapping(timestampColumn2, productGroup.FindProperty("Timestamp")!, productGroupsTableMapping);

            var review = FindEntityType("DemoPerformance.Review")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            review.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var demoPerformanceReviewTableBase = new TableBase("DemoPerformance.Review", null, relationalModel);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "bigint", demoPerformanceReviewTableBase);
            demoPerformanceReviewTableBase.Columns.Add("Id", idColumnBase3);
            var productIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ProductId", "bigint", demoPerformanceReviewTableBase);
            demoPerformanceReviewTableBase.Columns.Add("ProductId", productIdColumnBase0);
            var reviewTypeColumnBase = new ColumnBase<ColumnMappingBase>("ReviewType", "int", demoPerformanceReviewTableBase);
            demoPerformanceReviewTableBase.Columns.Add("ReviewType", reviewTypeColumnBase);
            var reviewerIdColumnBase = new ColumnBase<ColumnMappingBase>("ReviewerId", "bigint", demoPerformanceReviewTableBase)
            {
                IsNullable = true
            };
            demoPerformanceReviewTableBase.Columns.Add("ReviewerId", reviewerIdColumnBase);
            var scoreColumnBase = new ColumnBase<ColumnMappingBase>("Score", "tinyint", demoPerformanceReviewTableBase);
            demoPerformanceReviewTableBase.Columns.Add("Score", scoreColumnBase);
            var textColumnBase = new ColumnBase<ColumnMappingBase>("Text", "nvarchar(max)", demoPerformanceReviewTableBase)
            {
                IsNullable = true
            };
            demoPerformanceReviewTableBase.Columns.Add("Text", textColumnBase);
            var timestampColumnBase3 = new ColumnBase<ColumnMappingBase>("Timestamp", "rowversion", demoPerformanceReviewTableBase)
            {
                IsNullable = true
            };
            demoPerformanceReviewTableBase.Columns.Add("Timestamp", timestampColumnBase3);
            relationalModel.DefaultTables.Add("DemoPerformance.Review", demoPerformanceReviewTableBase);
            var demoPerformanceReviewMappingBase = new TableMappingBase<ColumnMappingBase>(review, demoPerformanceReviewTableBase, true);
            demoPerformanceReviewTableBase.AddTypeMapping(demoPerformanceReviewMappingBase, false);
            defaultTableMappings3.Add(demoPerformanceReviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, review.FindProperty("Id")!, demoPerformanceReviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productIdColumnBase0, review.FindProperty("ProductId")!, demoPerformanceReviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)reviewTypeColumnBase, review.FindProperty("ReviewType")!, demoPerformanceReviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)reviewerIdColumnBase, review.FindProperty("ReviewerId")!, demoPerformanceReviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)scoreColumnBase, review.FindProperty("Score")!, demoPerformanceReviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)textColumnBase, review.FindProperty("Text")!, demoPerformanceReviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timestampColumnBase3, review.FindProperty("Timestamp")!, demoPerformanceReviewMappingBase);

            var tableMappings3 = new List<TableMapping>();
            review.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var reviewsTable = new Table("Reviews", "Core", relationalModel);
            var idColumn3 = new Column("Id", "bigint", reviewsTable);
            reviewsTable.Columns.Add("Id", idColumn3);
            var productIdColumn0 = new Column("ProductId", "bigint", reviewsTable);
            reviewsTable.Columns.Add("ProductId", productIdColumn0);
            var reviewTypeColumn = new Column("ReviewType", "int", reviewsTable);
            reviewsTable.Columns.Add("ReviewType", reviewTypeColumn);
            var reviewerIdColumn = new Column("ReviewerId", "bigint", reviewsTable)
            {
                IsNullable = true
            };
            reviewsTable.Columns.Add("ReviewerId", reviewerIdColumn);
            var scoreColumn = new Column("Score", "tinyint", reviewsTable);
            reviewsTable.Columns.Add("Score", scoreColumn);
            var textColumn = new Column("Text", "nvarchar(max)", reviewsTable)
            {
                IsNullable = true
            };
            reviewsTable.Columns.Add("Text", textColumn);
            var timestampColumn3 = new Column("Timestamp", "rowversion", reviewsTable)
            {
                IsNullable = true
            };
            reviewsTable.Columns.Add("Timestamp", timestampColumn3);
            var pK_Reviews = new UniqueConstraint("PK_Reviews", reviewsTable, new[] { idColumn3 });
            reviewsTable.PrimaryKey = pK_Reviews;
            var pK_ReviewsUc = RelationalModel.GetKey(this,
                "DemoPerformance.Review",
                new[] { "Id" });
            pK_Reviews.MappedKeys.Add(pK_ReviewsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ReviewsUc).Add(pK_Reviews);
            reviewsTable.UniqueConstraints.Add("PK_Reviews", pK_Reviews);
            var iX_Reviews_ProductId = new TableIndex(
            "IX_Reviews_ProductId", reviewsTable, new[] { productIdColumn0 }, false);
            var iX_Reviews_ProductIdIx = RelationalModel.GetIndex(this,
                "DemoPerformance.Review",
                new[] { "ProductId" });
            iX_Reviews_ProductId.MappedIndexes.Add(iX_Reviews_ProductIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Reviews_ProductIdIx).Add(iX_Reviews_ProductId);
            reviewsTable.Indexes.Add("IX_Reviews_ProductId", iX_Reviews_ProductId);
            var iX_Reviews_ReviewerId = new TableIndex(
            "IX_Reviews_ReviewerId", reviewsTable, new[] { reviewerIdColumn }, false);
            var iX_Reviews_ReviewerIdIx = RelationalModel.GetIndex(this,
                "DemoPerformance.Review",
                new[] { "ReviewerId" });
            iX_Reviews_ReviewerId.MappedIndexes.Add(iX_Reviews_ReviewerIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Reviews_ReviewerIdIx).Add(iX_Reviews_ReviewerId);
            reviewsTable.Indexes.Add("IX_Reviews_ReviewerId", iX_Reviews_ReviewerId);
            relationalModel.Tables.Add(("Reviews", "Core"), reviewsTable);
            var reviewsTableMapping = new TableMapping(review, reviewsTable, true);
            reviewsTable.AddTypeMapping(reviewsTableMapping, false);
            tableMappings3.Add(reviewsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, review.FindProperty("Id")!, reviewsTableMapping);
            RelationalModel.CreateColumnMapping(productIdColumn0, review.FindProperty("ProductId")!, reviewsTableMapping);
            RelationalModel.CreateColumnMapping(reviewTypeColumn, review.FindProperty("ReviewType")!, reviewsTableMapping);
            RelationalModel.CreateColumnMapping(reviewerIdColumn, review.FindProperty("ReviewerId")!, reviewsTableMapping);
            RelationalModel.CreateColumnMapping(scoreColumn, review.FindProperty("Score")!, reviewsTableMapping);
            RelationalModel.CreateColumnMapping(textColumn, review.FindProperty("Text")!, reviewsTableMapping);
            RelationalModel.CreateColumnMapping(timestampColumn3, review.FindProperty("Timestamp")!, reviewsTableMapping);

            var reviewer = FindEntityType("DemoPerformance.Reviewer")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            reviewer.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var demoPerformanceReviewerTableBase = new TableBase("DemoPerformance.Reviewer", null, relationalModel);
            var credentialsIdColumnBase = new ColumnBase<ColumnMappingBase>("CredentialsId", "bigint", demoPerformanceReviewerTableBase)
            {
                IsNullable = true
            };
            demoPerformanceReviewerTableBase.Columns.Add("CredentialsId", credentialsIdColumnBase);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("Email", "nvarchar(255)", demoPerformanceReviewerTableBase)
            {
                IsNullable = true
            };
            demoPerformanceReviewerTableBase.Columns.Add("Email", emailColumnBase);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("Id", "bigint", demoPerformanceReviewerTableBase);
            demoPerformanceReviewerTableBase.Columns.Add("Id", idColumnBase4);
            var nameColumnBase2 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(255)", demoPerformanceReviewerTableBase)
            {
                IsNullable = true
            };
            demoPerformanceReviewerTableBase.Columns.Add("Name", nameColumnBase2);
            var timestampColumnBase4 = new ColumnBase<ColumnMappingBase>("Timestamp", "rowversion", demoPerformanceReviewerTableBase)
            {
                IsNullable = true
            };
            demoPerformanceReviewerTableBase.Columns.Add("Timestamp", timestampColumnBase4);
            relationalModel.DefaultTables.Add("DemoPerformance.Reviewer", demoPerformanceReviewerTableBase);
            var demoPerformanceReviewerMappingBase = new TableMappingBase<ColumnMappingBase>(reviewer, demoPerformanceReviewerTableBase, true);
            demoPerformanceReviewerTableBase.AddTypeMapping(demoPerformanceReviewerMappingBase, false);
            defaultTableMappings4.Add(demoPerformanceReviewerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, reviewer.FindProperty("Id")!, demoPerformanceReviewerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)credentialsIdColumnBase, reviewer.FindProperty("CredentialsId")!, demoPerformanceReviewerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, reviewer.FindProperty("Email")!, demoPerformanceReviewerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase2, reviewer.FindProperty("Name")!, demoPerformanceReviewerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timestampColumnBase4, reviewer.FindProperty("Timestamp")!, demoPerformanceReviewerMappingBase);

            var tableMappings4 = new List<TableMapping>();
            reviewer.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var reviewersTable = new Table("Reviewers", "Core", relationalModel);
            var idColumn4 = new Column("Id", "bigint", reviewersTable);
            reviewersTable.Columns.Add("Id", idColumn4);
            var credentialsIdColumn = new Column("CredentialsId", "bigint", reviewersTable)
            {
                IsNullable = true
            };
            reviewersTable.Columns.Add("CredentialsId", credentialsIdColumn);
            var emailColumn = new Column("Email", "nvarchar(255)", reviewersTable)
            {
                IsNullable = true
            };
            reviewersTable.Columns.Add("Email", emailColumn);
            var nameColumn2 = new Column("Name", "nvarchar(255)", reviewersTable)
            {
                IsNullable = true
            };
            reviewersTable.Columns.Add("Name", nameColumn2);
            var timestampColumn4 = new Column("Timestamp", "rowversion", reviewersTable)
            {
                IsNullable = true
            };
            reviewersTable.Columns.Add("Timestamp", timestampColumn4);
            var pK_Reviewers = new UniqueConstraint("PK_Reviewers", reviewersTable, new[] { idColumn4 });
            reviewersTable.PrimaryKey = pK_Reviewers;
            var pK_ReviewersUc = RelationalModel.GetKey(this,
                "DemoPerformance.Reviewer",
                new[] { "Id" });
            pK_Reviewers.MappedKeys.Add(pK_ReviewersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ReviewersUc).Add(pK_Reviewers);
            reviewersTable.UniqueConstraints.Add("PK_Reviewers", pK_Reviewers);
            var iX_Reviewers_CredentialsId = new TableIndex(
            "IX_Reviewers_CredentialsId", reviewersTable, new[] { credentialsIdColumn }, false);
            var iX_Reviewers_CredentialsIdIx = RelationalModel.GetIndex(this,
                "DemoPerformance.Reviewer",
                new[] { "CredentialsId" });
            iX_Reviewers_CredentialsId.MappedIndexes.Add(iX_Reviewers_CredentialsIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Reviewers_CredentialsIdIx).Add(iX_Reviewers_CredentialsId);
            reviewersTable.Indexes.Add("IX_Reviewers_CredentialsId", iX_Reviewers_CredentialsId);
            relationalModel.Tables.Add(("Reviewers", "Core"), reviewersTable);
            var reviewersTableMapping = new TableMapping(reviewer, reviewersTable, true);
            reviewersTable.AddTypeMapping(reviewersTableMapping, false);
            tableMappings4.Add(reviewersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, reviewer.FindProperty("Id")!, reviewersTableMapping);
            RelationalModel.CreateColumnMapping(credentialsIdColumn, reviewer.FindProperty("CredentialsId")!, reviewersTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, reviewer.FindProperty("Email")!, reviewersTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn2, reviewer.FindProperty("Name")!, reviewersTableMapping);
            RelationalModel.CreateColumnMapping(timestampColumn4, reviewer.FindProperty("Timestamp")!, reviewersTableMapping);

            var reviewerCredential = FindEntityType("DemoPerformance.ReviewerCredential")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            reviewerCredential.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var demoPerformanceReviewerCredentialTableBase = new TableBase("DemoPerformance.ReviewerCredential", null, relationalModel);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("Id", "bigint", demoPerformanceReviewerCredentialTableBase);
            demoPerformanceReviewerCredentialTableBase.Columns.Add("Id", idColumnBase5);
            var passwordHashColumnBase = new ColumnBase<ColumnMappingBase>("PasswordHash", "nvarchar(max)", demoPerformanceReviewerCredentialTableBase)
            {
                IsNullable = true
            };
            demoPerformanceReviewerCredentialTableBase.Columns.Add("PasswordHash", passwordHashColumnBase);
            var passwordSaltColumnBase = new ColumnBase<ColumnMappingBase>("PasswordSalt", "nvarchar(max)", demoPerformanceReviewerCredentialTableBase)
            {
                IsNullable = true
            };
            demoPerformanceReviewerCredentialTableBase.Columns.Add("PasswordSalt", passwordSaltColumnBase);
            var timestampColumnBase5 = new ColumnBase<ColumnMappingBase>("Timestamp", "varbinary(max)", demoPerformanceReviewerCredentialTableBase)
            {
                IsNullable = true
            };
            demoPerformanceReviewerCredentialTableBase.Columns.Add("Timestamp", timestampColumnBase5);
            var userNameColumnBase = new ColumnBase<ColumnMappingBase>("UserName", "nvarchar(max)", demoPerformanceReviewerCredentialTableBase)
            {
                IsNullable = true
            };
            demoPerformanceReviewerCredentialTableBase.Columns.Add("UserName", userNameColumnBase);
            relationalModel.DefaultTables.Add("DemoPerformance.ReviewerCredential", demoPerformanceReviewerCredentialTableBase);
            var demoPerformanceReviewerCredentialMappingBase = new TableMappingBase<ColumnMappingBase>(reviewerCredential, demoPerformanceReviewerCredentialTableBase, true);
            demoPerformanceReviewerCredentialTableBase.AddTypeMapping(demoPerformanceReviewerCredentialMappingBase, false);
            defaultTableMappings5.Add(demoPerformanceReviewerCredentialMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, reviewerCredential.FindProperty("Id")!, demoPerformanceReviewerCredentialMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordHashColumnBase, reviewerCredential.FindProperty("PasswordHash")!, demoPerformanceReviewerCredentialMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordSaltColumnBase, reviewerCredential.FindProperty("PasswordSalt")!, demoPerformanceReviewerCredentialMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timestampColumnBase5, reviewerCredential.FindProperty("Timestamp")!, demoPerformanceReviewerCredentialMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userNameColumnBase, reviewerCredential.FindProperty("UserName")!, demoPerformanceReviewerCredentialMappingBase);

            var tableMappings5 = new List<TableMapping>();
            reviewerCredential.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var reviewerCredentialTable = new Table("ReviewerCredential", null, relationalModel);
            var idColumn5 = new Column("Id", "bigint", reviewerCredentialTable);
            reviewerCredentialTable.Columns.Add("Id", idColumn5);
            var passwordHashColumn = new Column("PasswordHash", "nvarchar(max)", reviewerCredentialTable)
            {
                IsNullable = true
            };
            reviewerCredentialTable.Columns.Add("PasswordHash", passwordHashColumn);
            var passwordSaltColumn = new Column("PasswordSalt", "nvarchar(max)", reviewerCredentialTable)
            {
                IsNullable = true
            };
            reviewerCredentialTable.Columns.Add("PasswordSalt", passwordSaltColumn);
            var timestampColumn5 = new Column("Timestamp", "varbinary(max)", reviewerCredentialTable)
            {
                IsNullable = true
            };
            reviewerCredentialTable.Columns.Add("Timestamp", timestampColumn5);
            var userNameColumn = new Column("UserName", "nvarchar(max)", reviewerCredentialTable)
            {
                IsNullable = true
            };
            reviewerCredentialTable.Columns.Add("UserName", userNameColumn);
            var pK_ReviewerCredential = new UniqueConstraint("PK_ReviewerCredential", reviewerCredentialTable, new[] { idColumn5 });
            reviewerCredentialTable.PrimaryKey = pK_ReviewerCredential;
            var pK_ReviewerCredentialUc = RelationalModel.GetKey(this,
                "DemoPerformance.ReviewerCredential",
                new[] { "Id" });
            pK_ReviewerCredential.MappedKeys.Add(pK_ReviewerCredentialUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ReviewerCredentialUc).Add(pK_ReviewerCredential);
            reviewerCredentialTable.UniqueConstraints.Add("PK_ReviewerCredential", pK_ReviewerCredential);
            relationalModel.Tables.Add(("ReviewerCredential", null), reviewerCredentialTable);
            var reviewerCredentialTableMapping = new TableMapping(reviewerCredential, reviewerCredentialTable, true);
            reviewerCredentialTable.AddTypeMapping(reviewerCredentialTableMapping, false);
            tableMappings5.Add(reviewerCredentialTableMapping);
            RelationalModel.CreateColumnMapping(idColumn5, reviewerCredential.FindProperty("Id")!, reviewerCredentialTableMapping);
            RelationalModel.CreateColumnMapping(passwordHashColumn, reviewerCredential.FindProperty("PasswordHash")!, reviewerCredentialTableMapping);
            RelationalModel.CreateColumnMapping(passwordSaltColumn, reviewerCredential.FindProperty("PasswordSalt")!, reviewerCredentialTableMapping);
            RelationalModel.CreateColumnMapping(timestampColumn5, reviewerCredential.FindProperty("Timestamp")!, reviewerCredentialTableMapping);
            RelationalModel.CreateColumnMapping(userNameColumn, reviewerCredential.FindProperty("UserName")!, reviewerCredentialTableMapping);

            var specification = FindEntityType("DemoPerformance.Specification")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            specification.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var demoPerformanceSpecificationTableBase = new TableBase("DemoPerformance.Specification", null, relationalModel);
            var boolValueColumnBase = new ColumnBase<ColumnMappingBase>("BoolValue", "bit", demoPerformanceSpecificationTableBase)
            {
                IsNullable = true
            };
            demoPerformanceSpecificationTableBase.Columns.Add("BoolValue", boolValueColumnBase);
            var idColumnBase6 = new ColumnBase<ColumnMappingBase>("Id", "bigint", demoPerformanceSpecificationTableBase);
            demoPerformanceSpecificationTableBase.Columns.Add("Id", idColumnBase6);
            var keyColumnBase = new ColumnBase<ColumnMappingBase>("Key", "nvarchar(255)", demoPerformanceSpecificationTableBase)
            {
                IsNullable = true
            };
            demoPerformanceSpecificationTableBase.Columns.Add("Key", keyColumnBase);
            var numberValueColumnBase = new ColumnBase<ColumnMappingBase>("NumberValue", "float", demoPerformanceSpecificationTableBase)
            {
                IsNullable = true
            };
            demoPerformanceSpecificationTableBase.Columns.Add("NumberValue", numberValueColumnBase);
            var productIdColumnBase1 = new ColumnBase<ColumnMappingBase>("ProductId", "bigint", demoPerformanceSpecificationTableBase);
            demoPerformanceSpecificationTableBase.Columns.Add("ProductId", productIdColumnBase1);
            var stringValueColumnBase = new ColumnBase<ColumnMappingBase>("StringValue", "nvarchar(max)", demoPerformanceSpecificationTableBase)
            {
                IsNullable = true
            };
            demoPerformanceSpecificationTableBase.Columns.Add("StringValue", stringValueColumnBase);
            var timestampColumnBase6 = new ColumnBase<ColumnMappingBase>("Timestamp", "rowversion", demoPerformanceSpecificationTableBase)
            {
                IsNullable = true
            };
            demoPerformanceSpecificationTableBase.Columns.Add("Timestamp", timestampColumnBase6);
            relationalModel.DefaultTables.Add("DemoPerformance.Specification", demoPerformanceSpecificationTableBase);
            var demoPerformanceSpecificationMappingBase = new TableMappingBase<ColumnMappingBase>(specification, demoPerformanceSpecificationTableBase, true);
            demoPerformanceSpecificationTableBase.AddTypeMapping(demoPerformanceSpecificationMappingBase, false);
            defaultTableMappings6.Add(demoPerformanceSpecificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase6, specification.FindProperty("Id")!, demoPerformanceSpecificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)boolValueColumnBase, specification.FindProperty("BoolValue")!, demoPerformanceSpecificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)keyColumnBase, specification.FindProperty("Key")!, demoPerformanceSpecificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)numberValueColumnBase, specification.FindProperty("NumberValue")!, demoPerformanceSpecificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productIdColumnBase1, specification.FindProperty("ProductId")!, demoPerformanceSpecificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stringValueColumnBase, specification.FindProperty("StringValue")!, demoPerformanceSpecificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timestampColumnBase6, specification.FindProperty("Timestamp")!, demoPerformanceSpecificationMappingBase);

            var tableMappings6 = new List<TableMapping>();
            specification.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var specificationsTable = new Table("Specifications", "Core", relationalModel);
            var idColumn6 = new Column("Id", "bigint", specificationsTable);
            specificationsTable.Columns.Add("Id", idColumn6);
            var boolValueColumn = new Column("BoolValue", "bit", specificationsTable)
            {
                IsNullable = true
            };
            specificationsTable.Columns.Add("BoolValue", boolValueColumn);
            var keyColumn = new Column("Key", "nvarchar(255)", specificationsTable)
            {
                IsNullable = true
            };
            specificationsTable.Columns.Add("Key", keyColumn);
            var numberValueColumn = new Column("NumberValue", "float", specificationsTable)
            {
                IsNullable = true
            };
            specificationsTable.Columns.Add("NumberValue", numberValueColumn);
            var productIdColumn1 = new Column("ProductId", "bigint", specificationsTable);
            specificationsTable.Columns.Add("ProductId", productIdColumn1);
            var stringValueColumn = new Column("StringValue", "nvarchar(max)", specificationsTable)
            {
                IsNullable = true
            };
            specificationsTable.Columns.Add("StringValue", stringValueColumn);
            var timestampColumn6 = new Column("Timestamp", "rowversion", specificationsTable)
            {
                IsNullable = true
            };
            specificationsTable.Columns.Add("Timestamp", timestampColumn6);
            var pK_Specifications = new UniqueConstraint("PK_Specifications", specificationsTable, new[] { idColumn6 });
            specificationsTable.PrimaryKey = pK_Specifications;
            var pK_SpecificationsUc = RelationalModel.GetKey(this,
                "DemoPerformance.Specification",
                new[] { "Id" });
            pK_Specifications.MappedKeys.Add(pK_SpecificationsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SpecificationsUc).Add(pK_Specifications);
            specificationsTable.UniqueConstraints.Add("PK_Specifications", pK_Specifications);
            var iX_Specifications_ProductId = new TableIndex(
            "IX_Specifications_ProductId", specificationsTable, new[] { productIdColumn1 }, false);
            var iX_Specifications_ProductIdIx = RelationalModel.GetIndex(this,
                "DemoPerformance.Specification",
                new[] { "ProductId" });
            iX_Specifications_ProductId.MappedIndexes.Add(iX_Specifications_ProductIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Specifications_ProductIdIx).Add(iX_Specifications_ProductId);
            specificationsTable.Indexes.Add("IX_Specifications_ProductId", iX_Specifications_ProductId);
            relationalModel.Tables.Add(("Specifications", "Core"), specificationsTable);
            var specificationsTableMapping = new TableMapping(specification, specificationsTable, true);
            specificationsTable.AddTypeMapping(specificationsTableMapping, false);
            tableMappings6.Add(specificationsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn6, specification.FindProperty("Id")!, specificationsTableMapping);
            RelationalModel.CreateColumnMapping(boolValueColumn, specification.FindProperty("BoolValue")!, specificationsTableMapping);
            RelationalModel.CreateColumnMapping(keyColumn, specification.FindProperty("Key")!, specificationsTableMapping);
            RelationalModel.CreateColumnMapping(numberValueColumn, specification.FindProperty("NumberValue")!, specificationsTableMapping);
            RelationalModel.CreateColumnMapping(productIdColumn1, specification.FindProperty("ProductId")!, specificationsTableMapping);
            RelationalModel.CreateColumnMapping(stringValueColumn, specification.FindProperty("StringValue")!, specificationsTableMapping);
            RelationalModel.CreateColumnMapping(timestampColumn6, specification.FindProperty("Timestamp")!, specificationsTableMapping);

            var specificationDefinition = FindEntityType("DemoPerformance.SpecificationDefinition")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            specificationDefinition.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var demoPerformanceSpecificationDefinitionTableBase = new TableBase("DemoPerformance.SpecificationDefinition", null, relationalModel);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(max)", demoPerformanceSpecificationDefinitionTableBase)
            {
                IsNullable = true
            };
            demoPerformanceSpecificationDefinitionTableBase.Columns.Add("Description", descriptionColumnBase);
            var idColumnBase7 = new ColumnBase<ColumnMappingBase>("Id", "bigint", demoPerformanceSpecificationDefinitionTableBase);
            demoPerformanceSpecificationDefinitionTableBase.Columns.Add("Id", idColumnBase7);
            var keyColumnBase0 = new ColumnBase<ColumnMappingBase>("Key", "nvarchar(255)", demoPerformanceSpecificationDefinitionTableBase)
            {
                IsNullable = true
            };
            demoPerformanceSpecificationDefinitionTableBase.Columns.Add("Key", keyColumnBase0);
            var nameColumnBase3 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(255)", demoPerformanceSpecificationDefinitionTableBase)
            {
                IsNullable = true
            };
            demoPerformanceSpecificationDefinitionTableBase.Columns.Add("Name", nameColumnBase3);
            var productGroupIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ProductGroupId", "bigint", demoPerformanceSpecificationDefinitionTableBase);
            demoPerformanceSpecificationDefinitionTableBase.Columns.Add("ProductGroupId", productGroupIdColumnBase0);
            var timestampColumnBase7 = new ColumnBase<ColumnMappingBase>("Timestamp", "rowversion", demoPerformanceSpecificationDefinitionTableBase)
            {
                IsNullable = true
            };
            demoPerformanceSpecificationDefinitionTableBase.Columns.Add("Timestamp", timestampColumnBase7);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("Type", "nvarchar(max)", demoPerformanceSpecificationDefinitionTableBase)
            {
                IsNullable = true
            };
            demoPerformanceSpecificationDefinitionTableBase.Columns.Add("Type", typeColumnBase);
            var unitColumnBase = new ColumnBase<ColumnMappingBase>("Unit", "nvarchar(127)", demoPerformanceSpecificationDefinitionTableBase)
            {
                IsNullable = true
            };
            demoPerformanceSpecificationDefinitionTableBase.Columns.Add("Unit", unitColumnBase);
            var valueColumnBase = new ColumnBase<ColumnMappingBase>("Value", "nvarchar(max)", demoPerformanceSpecificationDefinitionTableBase)
            {
                IsNullable = true
            };
            demoPerformanceSpecificationDefinitionTableBase.Columns.Add("Value", valueColumnBase);
            relationalModel.DefaultTables.Add("DemoPerformance.SpecificationDefinition", demoPerformanceSpecificationDefinitionTableBase);
            var demoPerformanceSpecificationDefinitionMappingBase = new TableMappingBase<ColumnMappingBase>(specificationDefinition, demoPerformanceSpecificationDefinitionTableBase, true);
            demoPerformanceSpecificationDefinitionTableBase.AddTypeMapping(demoPerformanceSpecificationDefinitionMappingBase, false);
            defaultTableMappings7.Add(demoPerformanceSpecificationDefinitionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase7, specificationDefinition.FindProperty("Id")!, demoPerformanceSpecificationDefinitionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, specificationDefinition.FindProperty("Description")!, demoPerformanceSpecificationDefinitionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)keyColumnBase0, specificationDefinition.FindProperty("Key")!, demoPerformanceSpecificationDefinitionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase3, specificationDefinition.FindProperty("Name")!, demoPerformanceSpecificationDefinitionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productGroupIdColumnBase0, specificationDefinition.FindProperty("ProductGroupId")!, demoPerformanceSpecificationDefinitionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timestampColumnBase7, specificationDefinition.FindProperty("Timestamp")!, demoPerformanceSpecificationDefinitionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, specificationDefinition.FindProperty("Type")!, demoPerformanceSpecificationDefinitionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unitColumnBase, specificationDefinition.FindProperty("Unit")!, demoPerformanceSpecificationDefinitionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase, specificationDefinition.FindProperty("Value")!, demoPerformanceSpecificationDefinitionMappingBase);

            var tableMappings7 = new List<TableMapping>();
            specificationDefinition.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var specificationDefinitionsTable = new Table("SpecificationDefinitions", "Core", relationalModel);
            var idColumn7 = new Column("Id", "bigint", specificationDefinitionsTable);
            specificationDefinitionsTable.Columns.Add("Id", idColumn7);
            var descriptionColumn = new Column("Description", "nvarchar(max)", specificationDefinitionsTable)
            {
                IsNullable = true
            };
            specificationDefinitionsTable.Columns.Add("Description", descriptionColumn);
            var keyColumn0 = new Column("Key", "nvarchar(255)", specificationDefinitionsTable)
            {
                IsNullable = true
            };
            specificationDefinitionsTable.Columns.Add("Key", keyColumn0);
            var nameColumn3 = new Column("Name", "nvarchar(255)", specificationDefinitionsTable)
            {
                IsNullable = true
            };
            specificationDefinitionsTable.Columns.Add("Name", nameColumn3);
            var productGroupIdColumn0 = new Column("ProductGroupId", "bigint", specificationDefinitionsTable);
            specificationDefinitionsTable.Columns.Add("ProductGroupId", productGroupIdColumn0);
            var timestampColumn7 = new Column("Timestamp", "rowversion", specificationDefinitionsTable)
            {
                IsNullable = true
            };
            specificationDefinitionsTable.Columns.Add("Timestamp", timestampColumn7);
            var typeColumn = new Column("Type", "nvarchar(max)", specificationDefinitionsTable)
            {
                IsNullable = true
            };
            specificationDefinitionsTable.Columns.Add("Type", typeColumn);
            var unitColumn = new Column("Unit", "nvarchar(127)", specificationDefinitionsTable)
            {
                IsNullable = true
            };
            specificationDefinitionsTable.Columns.Add("Unit", unitColumn);
            var valueColumn = new Column("Value", "nvarchar(max)", specificationDefinitionsTable)
            {
                IsNullable = true
            };
            specificationDefinitionsTable.Columns.Add("Value", valueColumn);
            var pK_SpecificationDefinitions = new UniqueConstraint("PK_SpecificationDefinitions", specificationDefinitionsTable, new[] { idColumn7 });
            specificationDefinitionsTable.PrimaryKey = pK_SpecificationDefinitions;
            var pK_SpecificationDefinitionsUc = RelationalModel.GetKey(this,
                "DemoPerformance.SpecificationDefinition",
                new[] { "Id" });
            pK_SpecificationDefinitions.MappedKeys.Add(pK_SpecificationDefinitionsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SpecificationDefinitionsUc).Add(pK_SpecificationDefinitions);
            specificationDefinitionsTable.UniqueConstraints.Add("PK_SpecificationDefinitions", pK_SpecificationDefinitions);
            var iX_SpecificationDefinitions_ProductGroupId = new TableIndex(
            "IX_SpecificationDefinitions_ProductGroupId", specificationDefinitionsTable, new[] { productGroupIdColumn0 }, false);
            var iX_SpecificationDefinitions_ProductGroupIdIx = RelationalModel.GetIndex(this,
                "DemoPerformance.SpecificationDefinition",
                new[] { "ProductGroupId" });
            iX_SpecificationDefinitions_ProductGroupId.MappedIndexes.Add(iX_SpecificationDefinitions_ProductGroupIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_SpecificationDefinitions_ProductGroupIdIx).Add(iX_SpecificationDefinitions_ProductGroupId);
            specificationDefinitionsTable.Indexes.Add("IX_SpecificationDefinitions_ProductGroupId", iX_SpecificationDefinitions_ProductGroupId);
            relationalModel.Tables.Add(("SpecificationDefinitions", "Core"), specificationDefinitionsTable);
            var specificationDefinitionsTableMapping = new TableMapping(specificationDefinition, specificationDefinitionsTable, true);
            specificationDefinitionsTable.AddTypeMapping(specificationDefinitionsTableMapping, false);
            tableMappings7.Add(specificationDefinitionsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn7, specificationDefinition.FindProperty("Id")!, specificationDefinitionsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, specificationDefinition.FindProperty("Description")!, specificationDefinitionsTableMapping);
            RelationalModel.CreateColumnMapping(keyColumn0, specificationDefinition.FindProperty("Key")!, specificationDefinitionsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn3, specificationDefinition.FindProperty("Name")!, specificationDefinitionsTableMapping);
            RelationalModel.CreateColumnMapping(productGroupIdColumn0, specificationDefinition.FindProperty("ProductGroupId")!, specificationDefinitionsTableMapping);
            RelationalModel.CreateColumnMapping(timestampColumn7, specificationDefinition.FindProperty("Timestamp")!, specificationDefinitionsTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, specificationDefinition.FindProperty("Type")!, specificationDefinitionsTableMapping);
            RelationalModel.CreateColumnMapping(unitColumn, specificationDefinition.FindProperty("Unit")!, specificationDefinitionsTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn, specificationDefinition.FindProperty("Value")!, specificationDefinitionsTableMapping);
            var fK_Prices_Products_ProductId = new ForeignKeyConstraint(
                "FK_Prices_Products_ProductId", pricesTable, productsTable,
                new[] { productIdColumn },
                productsTable.FindUniqueConstraint("PK_Products")!, ReferentialAction.Cascade);
            var fK_Prices_Products_ProductIdFk = RelationalModel.GetForeignKey(this,
                "DemoPerformance.Price",
                new[] { "ProductId" },
                "DemoPerformance.Product",
                new[] { "Id" });
            fK_Prices_Products_ProductId.MappedForeignKeys.Add(fK_Prices_Products_ProductIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Prices_Products_ProductIdFk).Add(fK_Prices_Products_ProductId);
            pricesTable.ForeignKeyConstraints.Add(fK_Prices_Products_ProductId);
            productsTable.ReferencingForeignKeyConstraints.Add(fK_Prices_Products_ProductId);
            var fK_Products_Brands_BrandId = new ForeignKeyConstraint(
                "FK_Products_Brands_BrandId", productsTable, brandsTable,
                new[] { brandIdColumn },
                brandsTable.FindUniqueConstraint("PK_Brands")!, ReferentialAction.Cascade);
            var fK_Products_Brands_BrandIdFk = RelationalModel.GetForeignKey(this,
                "DemoPerformance.Product",
                new[] { "BrandId" },
                "DemoPerformance.Brand",
                new[] { "Id" });
            fK_Products_Brands_BrandId.MappedForeignKeys.Add(fK_Products_Brands_BrandIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Products_Brands_BrandIdFk).Add(fK_Products_Brands_BrandId);
            productsTable.ForeignKeyConstraints.Add(fK_Products_Brands_BrandId);
            brandsTable.ReferencingForeignKeyConstraints.Add(fK_Products_Brands_BrandId);
            var fK_Products_ProductGroups_ProductGroupId = new ForeignKeyConstraint(
                "FK_Products_ProductGroups_ProductGroupId", productsTable, productGroupsTable,
                new[] { productGroupIdColumn },
                productGroupsTable.FindUniqueConstraint("PK_ProductGroups")!, ReferentialAction.Cascade);
            var fK_Products_ProductGroups_ProductGroupIdFk = RelationalModel.GetForeignKey(this,
                "DemoPerformance.Product",
                new[] { "ProductGroupId" },
                "DemoPerformance.ProductGroup",
                new[] { "Id" });
            fK_Products_ProductGroups_ProductGroupId.MappedForeignKeys.Add(fK_Products_ProductGroups_ProductGroupIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Products_ProductGroups_ProductGroupIdFk).Add(fK_Products_ProductGroups_ProductGroupId);
            productsTable.ForeignKeyConstraints.Add(fK_Products_ProductGroups_ProductGroupId);
            productGroupsTable.ReferencingForeignKeyConstraints.Add(fK_Products_ProductGroups_ProductGroupId);
            var fK_Reviewers_ReviewerCredential_CredentialsId = new ForeignKeyConstraint(
                "FK_Reviewers_ReviewerCredential_CredentialsId", reviewersTable, reviewerCredentialTable,
                new[] { credentialsIdColumn },
                reviewerCredentialTable.FindUniqueConstraint("PK_ReviewerCredential")!, ReferentialAction.NoAction);
            var fK_Reviewers_ReviewerCredential_CredentialsIdFk = RelationalModel.GetForeignKey(this,
                "DemoPerformance.Reviewer",
                new[] { "CredentialsId" },
                "DemoPerformance.ReviewerCredential",
                new[] { "Id" });
            fK_Reviewers_ReviewerCredential_CredentialsId.MappedForeignKeys.Add(fK_Reviewers_ReviewerCredential_CredentialsIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Reviewers_ReviewerCredential_CredentialsIdFk).Add(fK_Reviewers_ReviewerCredential_CredentialsId);
            reviewersTable.ForeignKeyConstraints.Add(fK_Reviewers_ReviewerCredential_CredentialsId);
            reviewerCredentialTable.ReferencingForeignKeyConstraints.Add(fK_Reviewers_ReviewerCredential_CredentialsId);
            var fK_Reviews_Products_ProductId = new ForeignKeyConstraint(
                "FK_Reviews_Products_ProductId", reviewsTable, productsTable,
                new[] { productIdColumn0 },
                productsTable.FindUniqueConstraint("PK_Products")!, ReferentialAction.Cascade);
            var fK_Reviews_Products_ProductIdFk = RelationalModel.GetForeignKey(this,
                "DemoPerformance.Review",
                new[] { "ProductId" },
                "DemoPerformance.Product",
                new[] { "Id" });
            fK_Reviews_Products_ProductId.MappedForeignKeys.Add(fK_Reviews_Products_ProductIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Reviews_Products_ProductIdFk).Add(fK_Reviews_Products_ProductId);
            reviewsTable.ForeignKeyConstraints.Add(fK_Reviews_Products_ProductId);
            productsTable.ReferencingForeignKeyConstraints.Add(fK_Reviews_Products_ProductId);
            var fK_Reviews_Reviewers_ReviewerId = new ForeignKeyConstraint(
                "FK_Reviews_Reviewers_ReviewerId", reviewsTable, reviewersTable,
                new[] { reviewerIdColumn },
                reviewersTable.FindUniqueConstraint("PK_Reviewers")!, ReferentialAction.NoAction);
            var fK_Reviews_Reviewers_ReviewerIdFk = RelationalModel.GetForeignKey(this,
                "DemoPerformance.Review",
                new[] { "ReviewerId" },
                "DemoPerformance.Reviewer",
                new[] { "Id" });
            fK_Reviews_Reviewers_ReviewerId.MappedForeignKeys.Add(fK_Reviews_Reviewers_ReviewerIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Reviews_Reviewers_ReviewerIdFk).Add(fK_Reviews_Reviewers_ReviewerId);
            reviewsTable.ForeignKeyConstraints.Add(fK_Reviews_Reviewers_ReviewerId);
            reviewersTable.ReferencingForeignKeyConstraints.Add(fK_Reviews_Reviewers_ReviewerId);
            var fK_SpecificationDefinitions_ProductGroups_ProductGroupId = new ForeignKeyConstraint(
                "FK_SpecificationDefinitions_ProductGroups_ProductGroupId", specificationDefinitionsTable, productGroupsTable,
                new[] { productGroupIdColumn0 },
                productGroupsTable.FindUniqueConstraint("PK_ProductGroups")!, ReferentialAction.Cascade);
            var fK_SpecificationDefinitions_ProductGroups_ProductGroupIdFk = RelationalModel.GetForeignKey(this,
                "DemoPerformance.SpecificationDefinition",
                new[] { "ProductGroupId" },
                "DemoPerformance.ProductGroup",
                new[] { "Id" });
            fK_SpecificationDefinitions_ProductGroups_ProductGroupId.MappedForeignKeys.Add(fK_SpecificationDefinitions_ProductGroups_ProductGroupIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_SpecificationDefinitions_ProductGroups_ProductGroupIdFk).Add(fK_SpecificationDefinitions_ProductGroups_ProductGroupId);
            specificationDefinitionsTable.ForeignKeyConstraints.Add(fK_SpecificationDefinitions_ProductGroups_ProductGroupId);
            productGroupsTable.ReferencingForeignKeyConstraints.Add(fK_SpecificationDefinitions_ProductGroups_ProductGroupId);
            var fK_Specifications_Products_ProductId = new ForeignKeyConstraint(
                "FK_Specifications_Products_ProductId", specificationsTable, productsTable,
                new[] { productIdColumn1 },
                productsTable.FindUniqueConstraint("PK_Products")!, ReferentialAction.Cascade);
            var fK_Specifications_Products_ProductIdFk = RelationalModel.GetForeignKey(this,
                "DemoPerformance.Specification",
                new[] { "ProductId" },
                "DemoPerformance.Product",
                new[] { "Id" });
            fK_Specifications_Products_ProductId.MappedForeignKeys.Add(fK_Specifications_Products_ProductIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Specifications_Products_ProductIdFk).Add(fK_Specifications_Products_ProductId);
            specificationsTable.ForeignKeyConstraints.Add(fK_Specifications_Products_ProductId);
            productsTable.ReferencingForeignKeyConstraints.Add(fK_Specifications_Products_ProductId);
            return relationalModel.MakeReadOnly();
        }
    }
}
